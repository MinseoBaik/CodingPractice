def solution(skill, skill_trees):
    answer = 0
    for tree in skill_trees:
        correct = True
        idx = -1
        last = -1
        for t in tree:
            if t in skill:
                idx = skill.find(t)
                if last<=idx and idx-last<=1:
                    last = idx
                else:
                    correct = False
                    break
        if correct:
            answer+=1
    return answer


-------------------------------------------------------------------------
//Same code in C++
#include <string>
#include <vector>
#include <iostream>

using namespace std;

int solution(string skill, vector<string> skill_trees) {
    int answer = 0;
    
    for(int i=0; i<skill_trees.size(); i++)
    {
        bool finished = false;
        int skill_iterator = -1;
        for(int j=0; j<skill_trees[i].size(); j++)
        {
            int found = skill.find(skill_trees[i][j]);
            if(found != std::string::npos)
            {
                if(skill_iterator<found && found-skill_iterator<=1)
                {
                    skill_iterator = found;
                }
                else
                {
                    finished = true;
                    break;
                }
            }            
        }
        if(!finished)
        {
            cout << skill_trees[i] << endl;
            answer++;
        }
    }
    return answer;
}
